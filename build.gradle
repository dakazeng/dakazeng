
buildscript {  
	ext {
		springBootVersion = '2.0.4.RELEASE'
	}
    repositories {  
       maven {url 'http://maven.aliyun.com/nexus/content/groups/public'}
       mavenCentral()
       maven {url "https://plugins.gradle.org/m2/"}
    }  
    dependencies {  
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
              // mybatis-generator ���·��mybatis-generetor
        classpath "gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:1.4"
        
    }  
} 

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.arenagod.gradle.MybatisGenerator"

group = 'com.ldq'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets {
   main {
      java {
         srcDir 'src/main/java'
      }
      resources {
         srcDir 'src/main/resource'
      }
   }
}

configurations {  
    mybatisGenerator  
}

repositories {
   maven {url 'http://maven.aliyun.com/nexus/content/groups/public'}
   mavenCentral()
}



dependencies {

	compile('org.springframework.boot:spring-boot-starter-groovy-templates')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
	
	// https://mvnrepository.com/artifact/mysql/mysql-connector-java
	compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.46'
    
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.6'  
    mybatisGenerator 'mysql:mysql-connector-java:5.1.46'
    compile 'org.webjars.bower:github-com-novaeye-jquery-easyui-bower:1.5.0.1'
    
    // https://mvnrepository.com/artifact/com.github.miemiedev/mybatis-paginator
	compile group: 'com.github.miemiedev', name: 'mybatis-paginator', version: '1.2.15'
    
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-configuration-processor
	compile group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '2.0.4.RELEASE'
    
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security
	//compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.0.4.RELEASE'
	
	// https://mvnrepository.com/artifact/org.projectlombok/lombok
	compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.2'
	
    // https://mvnrepository.com/artifact/net.sf.json-lib/json-lib
	compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.4',classifier:'jdk15'
    
}

task mybatisGenerate {  
   doLast {
	    def properties = new Properties()  
        file("src/main/resources/mybatis/jdbc.properties").withInputStream { 
           inputStream ->  properties.load(inputStream)  
        }    
	    ant.properties['targetProject'] = projectDir.path  
	    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")  
	    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")  
	    ant.properties['userId'] = properties.getProperty("jdbc.username")  
	    ant.properties['password'] = properties.getProperty("jdbc.password")  
	    ant.properties['srcMainJava'] = projectDir.path + '/src/main/java'
	    ant.properties['srcMainResource'] = projectDir.path + '/src/main/resources'
	    ant.properties['modelPackage'] = properties.getProperty("package.model")  
	    ant.properties['clientPackage'] = properties.getProperty("package.mapper")  
	    ant.properties['mapperPackage'] = properties.getProperty("package.xml")   
	    ant.taskdef(  
	       name:'mbgenerator',  
	       classname:'org.mybatis.generator.ant.GeneratorAntTask',  
	       classpath:configurations.mybatisGenerator.asPath  
	    )  
	    ant.mbgenerator(overwrite:true,configfile:projectDir.path+'/src/main/resources/mybatis/mybatisGenerator.xml',verbose:true) {  
	        propertyset {  
	            propertyref(name:'targetProject') 
	            propertyref(name:'driverClass')  
	            propertyref(name:'connectionURL')   
	            propertyref(name:'userId')  
	            propertyref(name:'password')  
	            propertyref(name:'srcMainJava')  
	            propertyref(name:'srcMainResource')  
	            propertyref(name:'modelPackage')  
	            propertyref(name:'clientPackage')  
	            propertyref(name:'mapperPackage')  
	        }  
	    }  
    }
} 

